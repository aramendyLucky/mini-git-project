import os
import shutil

#Idea de orden de carpetas y archivos para un proyecto de software
# que implemente un sistema de control de versiones similar a Git.
# Este script reorganiza un proyecto existente en una estructura mÃ¡s limpia y modular.  
# Reorganiza un proyecto de software en una estructura modular
# y limpia, separando el backend, frontend, core y tests.
# AsegÃºrate de ejecutar este script en la raÃ­z del proyecto.
# Importante: Este script asume que se ejecuta en la raÃ­z del proyecto.

"""

mini-git-project/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ app.py              # ðŸ†• Servidor FastAPI (entrypoint backend)
â”‚   â”œâ”€â”€ minigit_core.py     # ðŸ†• LÃ³gica central adaptada para backend
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â””â”€â”€ routes.py       # ðŸ†• Endpoints de la API
â”‚   â””â”€â”€ requirements.txt    # ðŸ†• Dependencias del backend
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ index.html          # ðŸ†• Interfaz principal
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ style.css       # ðŸ†• Estilos
â”‚   â””â”€â”€ js/
â”‚       â””â”€â”€ app.js          # ðŸ†• LÃ³gica JavaScript
â”œâ”€â”€ core/
â”‚   â”œâ”€â”€ repository.py       # Existente (lÃ³gica de repositorio)
â”‚   â”œâ”€â”€ commit.py           # Existente (lÃ³gica de commit)
â”‚   â””â”€â”€ minigit.py          # CLI existente (puede quedarse aquÃ­ o en raÃ­z)
â”œâ”€â”€ tests/
â”‚   â”œâ”€â”€ test_repository.py      # ðŸ§ª Pruebas unitarias para repository
â”‚   â”œâ”€â”€ test_commit.py          # ðŸ§ª Pruebas unitarias para commit
â”‚   â”œâ”€â”€ test_minigit_cli.py     # ðŸ§ª Pruebas para la CLI
â”‚   â””â”€â”€ test_complete_flow.py   # ðŸ§ª Pruebas de flujo completo
â”œâ”€â”€ README.md               # ðŸ†• DocumentaciÃ³n principal
â””â”€â”€ .gitignore              # ðŸ†• Ignorar archivos temporales y dependencias

"""

# reorganize_project.py


# Estructura de carpetas y archivos a crear
structure = {
    "backend": [
        "app.py",
        "minigit_core.py",
        "requirements.txt",
        os.path.join("api", "__init__.py"),
        os.path.join("api", "routes.py"),
    ],
    "frontend": [
        "index.html",
        os.path.join("css", "style.css"),
        os.path.join("js", "app.js"),
    ],
    "core": [
        "repository.py",
        "commit.py",
        "minigit.py",
    ],
    "tests": [
        "test_repository.py",
        "test_commit.py",
        "test_minigit_cli.py",
        "test_complete_flow.py",
    ]
}

# Archivos que se moverÃ¡n si existen en la raÃ­z
move_files = {
    "repository.py": "core",
    "commit.py": "core",
    "minigit.py": "core",
    "test_repository.py": "tests",
    "test_commit.py": "tests",
    "test_minigit_cli.py": "tests",
    "test_complete_flow.py": "tests",
}

def ensure_structure():
    for folder, files in structure.items():
        os.makedirs(folder, exist_ok=True)
        for file in files:
            file_path = os.path.join(folder, file)
            dir_path = os.path.dirname(file_path)
            if dir_path and not os.path.exists(dir_path):
                os.makedirs(dir_path, exist_ok=True)
            if not os.path.exists(file_path):
                with open(file_path, "w", encoding="utf-8") as f:
                    pass  # Crea archivos vacÃ­os si no existen

def move_existing_files():
    for filename, target_folder in move_files.items():
        if os.path.exists(filename):
            shutil.move(filename, os.path.join(target_folder, filename))

def main():
    ensure_structure()
    move_existing_files()
    print("âœ… Proyecto reorganizado segÃºn la nueva estructura.")

if __name__ == "__main__":
    main()