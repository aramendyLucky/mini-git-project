#!/usr/bin/env python3
"""
Test completo para la clase Repository.
Un gran developer siempre prueba su c√≥digo antes de continuar.
"""

import os
import shutil
import tempfile
from pathlib import Path
from repository import Repository

def test_basic_functionality():
    """
    Prueba b√°sica: crear repositorio y verificar estructura.
    """
    print("=" * 50)
    print("TEST 1: Funcionalidad b√°sica")
    print("=" * 50)
    
    # Crear directorio temporal para pruebas
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ Directorio de prueba: {temp_dir}")
        
        # Cambiar al directorio temporal
        original_dir = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            # 1. Crear repositorio
            print("\n1Ô∏è‚É£ Inicializando repositorio...")
            repo = Repository()
            success = repo.init()
            
            assert success == True, "‚ùå Error: init() deber√≠a retornar True"
            print("‚úÖ Repositorio inicializado correctamente")
            
            # 2. Verificar estructura de carpetas
            print("\n2Ô∏è‚É£ Verificando estructura...")
            assert repo.mygit_path.exists(), "‚ùå Error: carpeta .mygit no existe"
            assert repo.objects_path.exists(), "‚ùå Error: carpeta objects no existe"
            assert repo.config_file.exists(), "‚ùå Error: config.json no existe"
            assert repo.staging_file.exists(), "‚ùå Error: staging.json no existe"
            assert repo.commits_file.exists(), "‚ùå Error: commits.json no existe"
            print("‚úÖ Estructura de carpetas correcta")
            
            # 3. Verificar que es repositorio v√°lido
            print("\n3Ô∏è‚É£ Verificando validez del repositorio...")
            assert repo.is_repository() == True, "‚ùå Error: no reconoce repo v√°lido"
            print("‚úÖ Repositorio reconocido como v√°lido")
            
            # 4. Verificar configuraci√≥n inicial
            print("\n4Ô∏è‚É£ Verificando configuraci√≥n...")
            config = repo.get_config()
            assert "name" in config, "‚ùå Error: falta 'name' en config"
            assert "created" in config, "‚ùå Error: falta 'created' en config"  
            assert "last_commit" in config, "‚ùå Error: falta 'last_commit' en config"
            assert config["last_commit"] is None, "‚ùå Error: last_commit deber√≠a ser None"
            print(f"‚úÖ Configuraci√≥n v√°lida: {config}")
            
            # 5. Verificar staging inicial
            print("\n5Ô∏è‚É£ Verificando staging inicial...")
            staging = repo.get_staging()
            assert staging["files"] == [], "‚ùå Error: staging deber√≠a estar vac√≠o"
            assert staging["timestamp"] is None, "‚ùå Error: timestamp deber√≠a ser None"
            print("‚úÖ Staging √°rea inicializada correctamente")
            
            # 6. Verificar commits inicial
            print("\n6Ô∏è‚É£ Verificando commits inicial...")
            commits = repo.get_commits()
            assert commits == [], "‚ùå Error: lista de commits deber√≠a estar vac√≠a"
            print("‚úÖ Lista de commits inicializada correctamente")
            
            print("\nüéâ TODAS LAS PRUEBAS B√ÅSICAS PASARON üéâ")
            
        finally:
            # Volver al directorio original
            os.chdir(original_dir)

def test_duplicate_init():
    """
    Prueba: intentar inicializar repositorio que ya existe.
    """
    print("\n" + "=" * 50)
    print("TEST 2: Inicializaci√≥n duplicada")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        original_dir = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            repo = Repository()
            
            # Primera inicializaci√≥n
            print("1Ô∏è‚É£ Primera inicializaci√≥n...")
            success1 = repo.init()
            assert success1 == True, "‚ùå Primera init deber√≠a funcionar"
            print("‚úÖ Primera inicializaci√≥n exitosa")
            
            # Segunda inicializaci√≥n (deber√≠a fallar)
            print("\n2Ô∏è‚É£ Segunda inicializaci√≥n (deber√≠a fallar)...")
            success2 = repo.init()
            assert success2 == False, "‚ùå Segunda init deber√≠a retornar False"
            print("‚úÖ Segunda inicializaci√≥n correctamente rechazada")
            
        finally:
            os.chdir(original_dir)

def test_file_hashing():
    """
    Prueba: c√°lculo de hash de archivos.
    """
    print("\n" + "=" * 50)
    print("TEST 3: C√°lculo de hash de archivos")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        original_dir = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            repo = Repository()
            repo.init()
            
            # Crear archivo de prueba
            test_file = "test.txt"
            test_content = "Hola mundo!\nEste es un archivo de prueba."
            
            print(f"1Ô∏è‚É£ Creando archivo: {test_file}")
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(test_content)
            
            # Calcular hash
            print("2Ô∏è‚É£ Calculando hash...")
            file_hash = repo.calculate_file_hash(test_file)
            
            # Verificar que el hash tiene formato correcto
            assert isinstance(file_hash, str), "‚ùå Hash deber√≠a ser string"
            assert len(file_hash) == 40, f"‚ùå Hash SHA-1 deber√≠a tener 40 caracteres, tiene {len(file_hash)}"
            assert all(c in '0123456789abcdef' for c in file_hash), "‚ùå Hash deber√≠a ser hexadecimal"
            
            print(f"‚úÖ Hash calculado correctamente: {file_hash}")
            
            # Calcular hash del mismo archivo otra vez (deber√≠a ser igual)
            print("3Ô∏è‚É£ Verificando consistencia...")
            file_hash2 = repo.calculate_file_hash(test_file)
            assert file_hash == file_hash2, "‚ùå Hash deber√≠a ser consistente"
            print("‚úÖ Hash es consistente")
            
            # Intentar hash de archivo inexistente
            print("4Ô∏è‚É£ Probando archivo inexistente...")
            try:
                repo.calculate_file_hash("archivo_que_no_existe.txt")
                assert False, "‚ùå Deber√≠a lanzar excepci√≥n para archivo inexistente"
            except Exception as e:
                print(f"‚úÖ Correctamente lanz√≥ excepci√≥n: {e}")
                
        finally:
            os.chdir(original_dir)

def test_invalid_repository():
    """
    Prueba: operaciones en directorio sin repositorio.
    """
    print("\n" + "=" * 50)
    print("TEST 4: Operaciones sin repositorio")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        original_dir = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            repo = Repository()
            
            # Verificar que NO es repositorio
            print("1Ô∏è‚É£ Verificando que NO es repositorio...")
            assert repo.is_repository() == False, "‚ùå No deber√≠a ser repositorio v√°lido"
            print("‚úÖ Correctamente detecta que no es repositorio")
            
            # Intentar operaciones sin inicializar
            print("2Ô∏è‚É£ Probando get_config() sin repo...")
            try:
                repo.get_config()
                assert False, "‚ùå Deber√≠a lanzar excepci√≥n"
            except Exception as e:
                print(f"‚úÖ Correctamente lanz√≥ excepci√≥n: {e}")
            
            print("3Ô∏è‚É£ Probando get_staging() sin repo...")
            try:
                repo.get_staging()
                assert False, "‚ùå Deber√≠a lanzar excepci√≥n"
            except Exception as e:
                print(f"‚úÖ Correctamente lanz√≥ excepci√≥n: {e}")
                
            print("4Ô∏è‚É£ Probando get_commits() sin repo...")
            try:
                repo.get_commits()
                assert False, "‚ùå Deber√≠a lanzar excepci√≥n"  
            except Exception as e:
                print(f"‚úÖ Correctamente lanz√≥ excepci√≥n: {e}")
                
        finally:
            os.chdir(original_dir)

def run_all_tests():
    """
    Ejecuta todas las pruebas.
    """
    print("üß™ INICIANDO PRUEBAS DE LA CLASE REPOSITORY")
    print("Un gran developer siempre prueba su c√≥digo\n")
    
    try:
        test_basic_functionality()
        test_duplicate_init()
        test_file_hashing()
        test_invalid_repository()
        
        print("\n" + "üéâ" * 20)
        print("üéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE üéâ")
        print("üéâ La clase Repository funciona perfectamente üéâ")
        print("üéâ" * 20)
        print("\n‚úÖ LISTO PARA CONTINUAR CON EL SIGUIENTE PASO")
        
    except AssertionError as e:
        print(f"\n‚ùå PRUEBA FALL√ì: {e}")
        print("‚ùå Necesitamos arreglar el c√≥digo antes de continuar")
        return False
    except Exception as e:
        print(f"\nüí• ERROR INESPERADO: {e}")
        print("üí• Revisar el c√≥digo")
        return False
    
    return True

if __name__ == "__main__":
    run_all_tests()